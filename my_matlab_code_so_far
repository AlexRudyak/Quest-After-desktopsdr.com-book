clear all;
clc;
%% Exercise 4.5 - MATLAB Figures
clc;
clear all;
% this is used to generate and plot sine and cosine waves
fs = 2000;                                            % sampling frequency in Hz
Ts = 1/fs;                                            % sample period
f1 = 100;                                             % frequency of the sine wave in Hz
Tmax = 0.6;                                           % duration of simulation
t = 0:Ts:Tmax;                                        % create and array of time values from 0 to Tmax
                                                      % in steps of Ts, the sample period)
As = 0.7*sin(2*pi*f1*t);                              % create a corresponding array of sine samples
Ac = 1.3*cos(2*pi*f1*t);                              % create a corresponding array of cosine samples
A3 = As + Ac;                                         % create an array with sums of the cos and sin waves
figure (1)                                            % new figure
hold off                                              % do not retain any previous data in plot
stem (t, As, 'r-o');                                  % plot in red continious line and round marker
hold on                                               % retain the sine while you add the cosine
stem (t, Ac, 'b-o');                                  % plot in blue continous line and round marker
hold on;                                              % retain the sum of the waves on top of the previous
stem (t, A3, 'g-o');                                  % plot in green continious line and round marker
xlabel ('Time (seconds)');                            % add a label to the x axis
ylabel ('Amplitude');                                 % add a label to the y axis
title ('Sine and Cosine');                            % add a title to the plot
legend ('0.7Sin(2\pif_1t)','1.3Cos(2\pif_1t)','location','NorthEast'); % add a legend to the graph
grid on;                                              % show the grid
axis ([0 (2/f1) -2 2]);                               % configure axis scaling
%% Exercise 4.6 - MATLAB Arrays
my_array_r   = [1, -2, -5, 6, 9, -6, -4, 0];          % define a row vector
my_array_c   = [8; -9; -1; -4; 3; 6; 5];              % define column vector
my_ones      = ones(1,10);                            % create a 1 by 10 row vector made of 1's
my_zeros     = zeros(1,8);                            % create a 1 by 8 row vector made of 0's
num_ones     = length(my_ones);                       % calculate the size of the row vector of 1's
num_zeros    = length(my_zeros);                      % calculate the size of the row vector of 0's
max_r        = max(my_array_r);                       % find max number in "my_array_r" array
max_c        = min(my_array_c);                       % find min number in "my array_c" array
my_rands     = rand(1,10);                            % create and array of random numbers between 0 and 1
my_rands_6   = -6 + ((6-(-6))*rand(1,10));            % creates a 1 by 10 array full of random numbers between -6 and 6
my_rands_3_5 = 3 + ((5-3)*rand(1,10));                % creates a 1 by 10 array full of random numbers between 3 and 5
my_rand_ints = round((12*rand(1,10))-6);              % creates a 1 by 10 array full of random integers between -6 and 6
my_rands_t   = transpose(my_rands);                   % transpose(switch between row and column) the "my_rands" array
my_rands_6_t = (my_rands_6)';                         % same as ^ 
first_elem   = my_rands (1);                          % pulls out the first element of my_rands array
sub_zero_i   = find(my_rands_6 < 0);                  % find indices (index) of elements < 0 in my_rands_6 array
my_rands_6_sz = my_rands_6(sub_zero_i);               % use the index we found before to pull the elements them selves from the my_rands_6 array
glue = [my_ones, my_zeros];                           % concatenate ("glue") the my_ones array to my_zeros array
%% Exercise 4.7 - Matrices in MATLAB
my_matrix_A = [1, 2, 3, 4; 5, 6, 7, 8; 9, 10, 11 12]; % create a 3 by 4 matrix A
my_matrix_B = [3, 3, 3, 3; 1, 2, 1, 2; 4, 4, 5, 5];   % create a 3 by 4 matrix B
size(my_matrix_B);                                    % find the dimensions of the matrix
my_oneM = ones(4,2);                                  % create matrix 4 by 2 of 1's
my_zeroM = zeros(3,5);                                % create a 3 by 5 matrix of 0's
my_randM = rand(5,5);                                 % create a random 5 by 5 matrix full of random numbers between 0 and 1
my_matrix_C = my_matrix_A + my_matrix_B;              % add matrix A with Matrix B
my_matrix_D = my_matrix_A - my_matrix_B;              % subtract matrix A with Matrix B
row_1 = my_matrix_A(1,:);                             % extract 1st row of matrix A 
col_2 = my_matrix_A(:,2);                             % extracts 2nd column of matrix A
my_matrix_A_t = (my_matrix_A)';                       % transpose matrix A
my_var(1,1,:) = [1, 2, 3, 4, 5, 6, 7, 8, 9];          % create a 1 x 1 x n data
my_var_2 = squeeze(my_var);                           % reduce to 1 x n data
%% Exercise 4.8 - MATLAB Structres
                                                      % script to demonstrate the use of structures
clear all;                                            % ensure no old data is hanging around!
% create the weather structure, and various fields within it
weather.days = [1 2 3 4 5 6 7 8 9 10];                % create a new array var under "weather" called days
weather.temperature = [11 10 14 17 18 17 15 16 18 20];% create a new array var under "weather" called temperture
weather.rainfall = [6 3 5 0 1 0 2 8 3 2];             % create a new array var under "weather" called rainfall
weather.wind = [12 9 8 4 2 5 8 7 8 6];                % create a new array var under "weather" called wind
weather.linestyle = 'k-o';                            % create a new string var under "weather" called linestyle - used to replace plot line style command
                                                      % plot a figure, by referencing specific fields of the weather structure
figure(1)                                             % number the first figurine as 1
hold off;                                             % make sure not data from old graphs is plotted on this one
plot(weather.days, weather.temperature, weather.linestyle); % plot weather.days on x weather.temperture on y with weather.linestyle plot style
xlabel('Days');                                       % name the x axis days
ylabel('Temperature (^oC)');                          % name the y axis Temperature (^oC)
title('Temperature over the first ten days of the month');  % add a plot title
grid on;                                              % add the grid to the plot
%% Exercise 4.9 - An Indtroduction to System Objects


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Software, Simulation Examples and Design Exercises Licence Agreement  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         
%  This license agreement refers to the simulation examples, design
%  exercises and files, and associated software MATLAB and Simulink
%  resources that accompany the book:
% 
%    Title: Software Defined Radio using MATLAB & Simulink and the RTL-SDR 
%    Published by Strathclyde Academic Media, 2015
%    Authored by Robert W. Stewart, Kenneth W. Barlee, Dale S.W. Atkinson, 
%    and Louise H. Crockett
%
%  and made available as a download from www.desktopSDR.com or variously 
%  acquired by other means such as via USB storage, cloud storage, disk or 
%  any other electronic or optical or magnetic storage mechanism. These 
%  files and associated software may be used subject to the terms of 
%  agreement of the conditions below:
%
%    Copyright ï¿½ 2015 Robert W. Stewart, Kenneth W. Barlee, 
%    Dale S.W. Atkinson, and Louise H. Crockett. All rights reserved.
%
%  Redistribution and use in source and binary forms, with or without 
%  modification, are permitted provided that the following conditions are
%  met:
%
%   (1) Redistributions of source code must retain the above copyright 
%       notice, this list of conditions and the following disclaimer.
%
%   (2) Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in 
%       the documentation and/or other materials provided with the 
%       distribution.
%
%   (3) Neither the name of the copyright holder nor the names of its 
%       contributors may be used to endorse or promote products derived 
%       from this software without specific prior written permission.
%
%   (4) In all cases, the software is, and all modifications and 
%       derivatives of the software shall be, licensed to you solely for
%       use in conjunction with The MathWorks, Inc. products and service
%       offerings.
%
%  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
%  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
%  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
%  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
%  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
%  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
%  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
%  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
%  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
%  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
%  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%%  Audio Tracks used in Simulations Examples and Design Exercises
% 
%  The music and vocal files used within the Examples files and software 
%  within the book were variously written, arranged, performed, recorded 
%  and produced by Garrey Rice, Adam Struth, Jamie Struth, Iain 
%  Thistlethwaite and also Marshall Craigmyle who collectively, and 
%  individually where appropriate, assert and retain all of their 
%  copyright, performance and artistic rights. Permission to use and 
%  reproduce this music is granted for all purposes associated with 
%  MATLAB and Simulink software and the simulation examples and design 
%  exercises files that accompany this book. Requests to use the music 
%  for any other purpose should be directed to: info@desktopSDR.com. For
%  information on music track names, full credits, and links to the 
%  musicians please refer to www.desktopSDR.com/more/audio.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%





